import logging
import pluggy
from typing import Optional, Any
from sat_toolkit.tools.vehicle_utils import query_tcam_ip, query_dhu_ip, check_ecu_alive
from sat_toolkit.core.exploit_spec import ExploitResult
from sat_toolkit.tools.net_audit_mgr import NetAudit_Mgr
from sat_toolkit.tools.sat_utils import raise_err, raise_ok
import time

logger = logging.getLogger(__name__)
hookimpl = pluggy.HookimplMarker("exploit_mgr")

class FloodAttackPlugin:
    def __init__(self):
        self.net_audit_mgr = NetAudit_Mgr.Instance()

    @hookimpl
    def initialize(self, device_plugin: Optional[Any] = None):
        logger.debug("Initializing FloodAttackPlugin")
        # If you need to initialize anything with the device_plugin, do it here
        pass

    @hookimpl
    def execute(self, target: Optional[Any] = None) -> ExploitResult:
        if not target or not isinstance(target, dict):
            return ExploitResult(False, "Invalid target. Expected a dictionary with 'attack_type' and 'ecu'.", {})

        attack_type = target.get('attack_type')
        ecu = target.get('ecu')

        if not attack_type or not ecu:
            return ExploitResult(False, "Missing 'attack_type' or 'ecu' in target.", {})

        logger.info(f"Executing {attack_type} flood attack on {ecu}")

        try:
            self._check_ecu_alive(ecu, "ip", attack_type)
            
            ecu_ip = self._get_ecu_ip(ecu)
            if not ecu_ip:
                return ExploitResult(False, f"Failed to get IP for {ecu}", {})

            self._start_flood_attack(attack_type, ecu, ecu_ip)
            
            self._perform_checks(ecu, attack_type)

            self._stop_flood_attack(attack_type)

            self._check_ecu_alive(ecu, "ip", attack_type)

            return ExploitResult(True, f"{ecu} {attack_type} flood attack successful", {"ecu": ecu, "attack_type": attack_type})
        except Exception as e:
            logger.error(f"Error during flood attack execution: {str(e)}")
            return ExploitResult(False, f"Flood attack failed: {str(e)}", {})

    @hookimpl
    def cleanup(self):
        logger.info("Cleaning up FloodAttackPlugin")
        # Stop any ongoing attacks
        self.net_audit_mgr.stop_icmp_flood_attack()
        self.net_audit_mgr.stop_udp_flood_attack()
        self.net_audit_mgr.stop_tcp_flood_attack()
        self.net_audit_mgr.stop_mac_flood_attack()

    def _check_ecu_alive(self, ecu, checktype, attack_type):
        if not check_ecu_alive(ecu, checktype):
            self._stop_flood_attack(attack_type)
            raise_err(f"{ecu} is not alive")

    def _get_ecu_ip(self, ecu):
        if ecu == "tcam":
            return query_tcam_ip()
        elif ecu == "dhu":
            return query_dhu_ip()
        elif ecu == "vgm":
            return "169.254.19.1"
        return None

    def _start_flood_attack(self, attack_type, ecu, ecu_ip):
        if attack_type == "icmp":
            self.net_audit_mgr.start_icmp_flood_attack(ecu_ip)
        elif attack_type == "udp":
            self.net_audit_mgr.start_udp_flood_attack(ecu_ip)
        elif attack_type == "tcp":
            self.net_audit_mgr.start_tcp_flood_attack(ecu_ip)
        elif attack_type == "mac":
            if ecu == "vgm":
                self.net_audit_mgr.start_mac_flood_attack(ecu_ip, "eth0")
            else:
                self.net_audit_mgr.start_mac_flood_attack(ecu_ip)

    def _perform_checks(self, ecu, attack_type):
        for _ in range(6):  # Check every 5 seconds for 30 seconds
            time.sleep(5)
            self._check_ecu_alive(ecu, "ip", attack_type)

    def _stop_flood_attack(self, attack_type):
        if attack_type == "icmp":
            self.net_audit_mgr.stop_icmp_flood_attack()
        elif attack_type == "udp":
            self.net_audit_mgr.stop_udp_flood_attack()
        elif attack_type == "tcp":
            self.net_audit_mgr.stop_tcp_flood_attack()
        elif attack_type == "mac":
            self.net_audit_mgr.stop_mac_flood_attack()

def register_plugin(pm):
    flood_attack_plugin = FloodAttackPlugin()
    pm.register(flood_attack_plugin)