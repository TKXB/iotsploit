import logging
import pluggy
from typing import Optional, Any
from sat_toolkit.core.exploit_spec import ExploitResult
from sat_toolkit.tools.net_audit_mgr import NetAudit_Mgr
from sat_toolkit.tools.env_mgr import Env_Mgr
from sat_toolkit.tools.wifi_mgr import WiFi_Mgr
from sat_toolkit.tools.vehicle_utils import query_tcam_ip, query_dhu_ip
from sat_toolkit.tools.bash_script_engine import Bash_Script_Mgr
from sat_toolkit.core.base_plugin import BasePlugin
logger = logging.getLogger(__name__)
hookimpl = pluggy.HookimplMarker("exploit_mgr")

class IPScanPlugin(BasePlugin):
    def __init__(self):
        super().__init__({
            'Name': 'IP Network Scanner',
            'Description': 'Scans network for active IP addresses and open ports',
            'License': 'GPL',
            'Author': ['iotsploit'],
            'Parameters': {
                'scan_type': {
                    'type': 'str',
                    'required': True,
                    'description': 'Type of scan to perform',
                    'default': 'tcam_ap_forward',
                    'validation': {
                        'choices': ['tcam_ap_forward']
                    }
                },
                'scan_mode': {
                    'type': 'str',
                    'required': True,
                    'description': 'Scan mode: fast (common ports) or full (all ports)',
                    'default': 'fast',
                    'validation': {
                        'choices': ['fast', 'full']
                    }
                }
            }
        })
        
        self.net_audit_mgr = NetAudit_Mgr.Instance()
        self.env_mgr = Env_Mgr.Instance()
        self.wifi_mgr = WiFi_Mgr.Instance()
        self.bash_mgr = Bash_Script_Mgr.Instance()
        
        # Constants
        self.TCAM_AP_SCAN_IP_LIST = "tcam_ap_scan_ip_list"
        self.DEL_ROUTES_CMDS = "del_routes_cmds"
        
        # IP Lists
        self.scan_iplist_fast = [
                "10.0.0.0/8", #扫这个段会很慢
                "198.18.0.0/16",
                "198.99.0.0/16",
                "192.168.0.0/16",
                "169.254.0.0/16",
        ]
        
        self.scan_iplist_full = [
                "198.18.34.1",
                "198.18.36.1",
                "198.18.36.2",
                "198.18.36.3",
                "198.18.36.4",
                "198.18.35.2",
                "198.18.35.3",
                "198.18.35.7",
                "198.18.36.177",
                "198.18.35.4",
                "198.18.35.11",
                "198.18.35.12",
                "198.18.35.13",
                "198.18.35.14",
                "198.18.32.18",
                "198.18.32.1",
                "198.18.32.2",
                "198.99.34.1",
                "198.18.34.2",
                "198.18.34.10",
                "198.18.34.11",
                "198.18.34.15",
                "198.18.32.19",
                "198.18.34.3",
                "198.18.34.4",
                "198.18.34.5",
                "198.18.34.14",
                "198.18.37.20",
                "198.18.35.5",
                "198.18.35.161",
                "198.18.35.6",
                "198.18.35.128",
                "198.18.36.96",
                "198.18.35.8",
                "198.18.32.17",
                "198.18.35.9",
                "198.18.35.10",
                "198.18.32.24",
                "198.99.34.15",
                "192.168.1.3",
                "10.1.6.6",
                "10.1.4.6",
                "10.1.2.6",
                "10.1.5.6",
                "10.1.3.6"
        ]
        
        self.fast_ports = "21,22,23,5555,50000,8000,11111,12345,10086,53,1883,13400"

    @hookimpl
    def initialize(self, device_plugin: Optional[Any] = None):
        logger.debug("Initializing IPScanPlugin")
        self.scan_iplist = []
        self.scan_portlist = ""

    def _add_routes(self, viaip, dstips):
        for ip in dstips:
            route_cmds = self.env_mgr.query(self.DEL_ROUTES_CMDS, [])
            route_cmds.append(f"ip route del {ip} via {viaip}")
            self.env_mgr.set(self.DEL_ROUTES_CMDS, route_cmds)
            self.bash_mgr.exec_cmd(f"ip route add {ip} via {viaip}")

    def _del_routes(self):
        route_cmds = self.env_mgr.query(self.DEL_ROUTES_CMDS, [])
        for cmd in route_cmds:
            self.bash_mgr.exec_cmd(cmd)
        self.env_mgr.set(self.DEL_ROUTES_CMDS, [])

    def tcam_ap_ip_scan(self):
        iplist = self.env_mgr.query(self.TCAM_AP_SCAN_IP_LIST)
        if iplist is None:
            tcamip = query_tcam_ip()
            if tcamip and self.wifi_mgr.status()['WIFI_MODE'] == "STA":
                self._add_routes(tcamip, self.scan_iplist)
                iplist = self.net_audit_mgr.ip_detect(self.scan_iplist)
                self._del_routes()
                self.env_mgr.set(self.TCAM_AP_SCAN_IP_LIST, iplist)
            else:
                return ExploitResult(False, "WiFi status incorrect", {})
        return iplist

    @hookimpl
    def execute(self, target: Optional[Any] = None, parameters: Optional[dict] = None) -> ExploitResult:
        if not target or not isinstance(target, dict):
            return ExploitResult(False, "Invalid target configuration", {})

        scan_type = target.get('scan_type')
        scan_mode = target.get('scan_mode', 'fast')

        # Set scan parameters based on mode
        if scan_mode == "fast":
            self.scan_iplist = self.scan_iplist_fast
            self.scan_portlist = self.fast_ports
        elif scan_mode == "full":
            self.scan_iplist = self.scan_iplist_full
            self.scan_portlist = "1-65535"
        else:
            return ExploitResult(False, f"Invalid scan mode: {scan_mode}", {})

        try:
            if scan_type == "tcam_ap_forward":
                iplist = self.tcam_ap_ip_scan()
                if iplist:
                    return ExploitResult(False, f"TCAM AP exposed internal IPs: {iplist}", {"exposed_ips": iplist})
                return ExploitResult(True, "No internal IPs exposed through TCAM AP", {})
            # Add other scan types here...
            
            return ExploitResult(False, f"Unknown scan type: {scan_type}", {})
            
        except Exception as e:
            logger.error(f"Error during IP scan: {str(e)}")
            return ExploitResult(False, f"IP scan failed: {str(e)}", {})

    @hookimpl
    def cleanup(self):
        logger.info("Cleaning up IPScanPlugin")
        self._del_routes()

def register_plugin(pm):
    ip_scan_plugin = IPScanPlugin()
    pm.register(ip_scan_plugin)