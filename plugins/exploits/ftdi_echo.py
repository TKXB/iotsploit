#!/usr/bin/python3

import logging
import pluggy
from typing import Optional, Any
from sat_toolkit.core.exploit_spec import ExploitResult
from sat_toolkit.core.base_plugin import BasePlugin
from facedancer.devices.ftdi import FTDIDevice

logger = logging.getLogger(__name__)
hookimpl = pluggy.HookimplMarker("exploit_mgr")

class FTDIEchoPlugin(BasePlugin):
    def __init__(self):
        super().__init__({
            'Name': 'FTDI Echo',
            'Description': 'Creates a virtual FTDI device that echoes back received data in uppercase.',
            'License': 'GPL',
            'Author': ['iotsploit'],
            'RequiresRoot': False,
            'Parameters': {
                'message': {
                    'type': 'str',
                    'required': False,
                    'description': 'Custom welcome message to display',
                    'default': 'Hello! Welcome to the FTDI demo.\nEnter any text you\'d like, and we\'ll send it back in UPPERCASE.\n'
                }
            }
        })
        self.device = None
        self.running = False

    @hookimpl
    def initialize(self, device_plugin: Optional[Any] = None):
        logger.debug("Initializing FTDIEchoPlugin")
        try:
            self.device = FTDIDevice()
            return True
        except Exception as e:
            logger.error(f"Failed to initialize FTDI device: {str(e)}")
            return False

    def _handle_data(self, data):
        """Convert received data to uppercase and send it back"""
        try:
            # Convert the data to uppercase...
            uppercase = data.decode('utf-8').upper()
            # ... convert serial line endings to Python line endings...
            uppercase = uppercase.replace('\r', '\n')
            # ... and transmit our response.
            self.device.transmit(uppercase)
        except Exception as e:
            logger.error(f"Error handling data: {str(e)}")

    @hookimpl
    def execute(self, target: Optional[Any] = None, parameters: Optional[dict] = None) -> ExploitResult:
        logger.info("Executing FTDIEchoPlugin")
        try:
            if not self.device:
                return ExploitResult(False, "FTDI device not initialized", {})

            # Get welcome message from parameters or use default
            welcome_msg = parameters.get('message', self.info['Parameters']['message']['default']) if parameters else self.info['Parameters']['message']['default']

            # Set up the data handler
            self.device.handle_serial_data_received = self._handle_data
            self.running = True

            # Wait for host connection and send welcome message
            logger.info("Waiting for host connection...")
            self.device.wait_for_host()
            logger.info("Host connected!")

            # Send welcome message
            self.device.transmit(welcome_msg)

            return ExploitResult(True, "FTDI echo device running successfully", {
                "status": "running",
                "message": "Device is waiting for data to echo"
            })

        except Exception as e:
            logger.error(f"Error during FTDI echo execution: {str(e)}")
            return ExploitResult(False, f"FTDI echo failed: {str(e)}", {})

    @hookimpl
    def cleanup(self):
        logger.info("Cleaning up FTDIEchoPlugin")
        try:
            if self.device:
                self.running = False
                self.device = None
        except Exception as e:
            logger.error(f"Error during cleanup: {str(e)}") 