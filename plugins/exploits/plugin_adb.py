import logging
import pluggy
from typing import Optional, Any
from sat_toolkit.tools.sat_utils import *
from sat_toolkit.tools.input_mgr import Input_Mgr
from sat_toolkit.tools.env_mgr import Env_Mgr
from sat_toolkit.tools.adb_mgr import ADB_Mgr
from sat_toolkit.core.exploit_spec import ExploitResult
from sat_toolkit.core.base_plugin import BasePlugin

logger = logging.getLogger(__name__)
hookimpl = pluggy.HookimplMarker("exploit_mgr")

class TCAMCheckPlugin(BasePlugin):
    def __init__(self):
        super().__init__({
            'Name': 'TCAM ADB Check',
            'Description': 'Checks if TCAM ADB device is connected and accessible',
            'License': 'GPL',
            'Author': ['iotsploit'],
            'Parameters': {
                'serial_id': {
                    'type': 'str',
                    'required': False,
                    'description': 'TCAM ADB Serial ID to check',
                    'default': None
                }
            }
        })

    @hookimpl
    def initialize(self, device_plugin: Optional[Any] = None):
        logger.info("Initializing TCAMCheckPlugin")
        pass

    @hookimpl
    def execute(self, target: Optional[Any] = None, parameters: Optional[dict] = None) -> ExploitResult:
        logger.info("TCAMCheckPlugin execute")
        # Input_Mgr.Instance().confirm("请确认TCAM已经通过USB连接SAT，且TCAM的ADB已经关闭")
        return
        vehicle_tcam_serial = Env_Mgr.Instance().get("__SAT_ENV__VehicleInfo_TCAM_ADB_SERIAL_ID")
        if vehicle_tcam_serial is None:
            raise_err("车辆未设置TCAM ADB SERIAL ID! VehicleInfo_TCAM_ADB_SERIAL_ID NOT SET!")

        logger.info("TCAM ADB SERIAL ID:{} 尝试本地匹配".format(vehicle_tcam_serial))
        
        adb_devices = ADB_Mgr.Instance().list_devices()
        for dev in adb_devices:
            if dev.serial == vehicle_tcam_serial:
                raise_err("SAT已经扫描到TCAM的ADB设备:{}".format(dev))

        raise_ok("SAT没有扫描到TCAM的ADB设备")

def register_plugin(pm):
    pm.register(TCAMCheckPlugin())
