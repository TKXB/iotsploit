#!/usr/bin/python3

import logging
import pluggy
from typing import Optional, Any
from sat_toolkit.core.exploit_spec import AsyncExploitResult
from sat_toolkit.core.base_plugin import BasePlugin
from facedancer.devices.ftdi import FTDIDevice

logger = logging.getLogger(__name__)
hookimpl = pluggy.HookimplMarker("exploit_mgr")

class FTDIEchoPlugin(BasePlugin):
    def __init__(self):
        super().__init__({
            'Name': 'FTDI Echo',
            'Description': 'Creates a virtual FTDI device that echoes back received data in uppercase.',
            'License': 'GPL',
            'Author': ['iotsploit'],
            'RequiresRoot': False,
            'Parameters': {
                'message': {
                    'type': 'str',
                    'required': False,
                    'description': 'Custom welcome message to display',
                    'default': 'Hello! Welcome to the FTDI demo.\nEnter any text you\'d like, and we\'ll send it back in UPPERCASE.\n'
                }
            }
        })
        self.device = None
        self.running = False

    @hookimpl
    def initialize(self, device_plugin: Optional[Any] = None):
        logger.info("Initializing FTDIEchoPlugin")

    def _handle_data_async(self, data):
        """ Convert any received data to uppercase. """

        # Convert the data to uppercase...
        uppercase = data.decode('utf-8').upper()

        # ... convert serial line endings to Python line endings...
        uppercase = uppercase.replace('\r', '\n')

        # ... and transmit our response.
        self.device.transmit(uppercase)

    @hookimpl
    async def execute_async(self, target: Optional[Any] = None, parameters: Optional[dict] = None) -> AsyncExploitResult:
        logger.info("Executing FTDIEchoPlugin asynchronously")
        self.device = FTDIDevice()
        try:
            if not self.device:
                return AsyncExploitResult(False, "FTDI device not initialized", {})

            async def send_hello():
                logging.info("Waiting for the host to connect.")
                await self.device.wait_for_host()
                logging.info("Host connected!")

                logging.info("Telling the user hello...")
                self.device.transmit("Hello! Welcome to the FTDI demo.\n")
                self.device.transmit("Enter any text you'd like, and we'll send it back in UPPERCASE.\n")

            # Set up the data handler
            self.device.handle_serial_data_received = self._handle_data_async
            self.running = True

            self.device.emulate(send_hello())  # 传入 send_hello 协程

            return AsyncExploitResult(True, "FTDI echo device running successfully", {
                "status": "running",
                "message": "Device is waiting for data to echo"
            })

        except Exception as e:
            logger.error(f"Error during FTDI echo execution: {str(e)}")
            return AsyncExploitResult(False, f"FTDI echo failed: {str(e)}", {})

    @hookimpl
    def cleanup(self):
        logger.info("Cleaning up FTDIEchoPlugin")