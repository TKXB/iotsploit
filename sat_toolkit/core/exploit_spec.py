import pluggy
from typing import Any, Dict, Optional

hookspec = pluggy.HookspecMarker("exploit_mgr")

class ExploitResult:
    def __init__(self, success: bool, message: str, data: Dict[str, Any]):
        self.success = success
        self.message = message
        self.data = data

    def __repr__(self):
        return f"ExploitResult(success={self.success}, message={self.message}, data={self.data})"

class ExploitPluginSpec:
    @hookspec
    def initialize(self, device_plugin: Optional[Any] = None):
        """
        Initialize the exploit plugin with a device plugin.
        
        :param device_plugin: An instance of a device plugin (e.g., JLinkAbility, USBAbility), optional
        """

    @hookspec
    def execute(self, target: Optional[Any] = None) -> ExploitResult:
        """
        Execute the exploit on the specified target using the initialized device plugin.
        
        :param target: The target of the exploit (e.g., an address or identifier)
        :return: An ExploitResult object containing the result of the exploit
        """

    @hookspec
    def cleanup(self):
        """
        Perform any necessary cleanup after the exploit execution.
        """