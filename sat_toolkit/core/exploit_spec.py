import pluggy
from typing import Any, Dict, Optional
from dataclasses import dataclass

hookspec = pluggy.HookspecMarker("exploit_mgr")

@dataclass
class AsyncExploitResult:
    status: bool = None
    message: str = ""
    progress: float = 0
    data: Dict[str, Any] = None

    def update(self, status=None, message=None, progress=None, data=None):
        if status is not None:
            self.status = status
        if message is not None:
            self.message = message
        if progress is not None:
            self.progress = progress
        if data is not None:
            self.data = data

class ExploitResult:
    def __init__(self, success: bool, message: str, data: Dict[str, Any]):
        self.success = success
        self.message = message
        self.data = data

    def __repr__(self):
        return f"ExploitResult(success={self.success}, message={self.message}, data={self.data})"

class ExploitPluginSpec:
    @hookspec
    def initialize(self, device_plugin: Optional[Any] = None):
        """
        Initialize the exploit plugin with a device plugin.
        
        :param device_plugin: An instance of a device plugin (e.g., JLinkAbility, USBAbility), optional
        """

    @hookspec
    def execute(self, target: Optional[Any] = None) -> ExploitResult:
        """
        Execute the exploit on the specified target using the initialized device plugin.
        
        :param target: The target of the exploit (e.g., an address or identifier)
        :return: An ExploitResult object containing the result of the exploit
        """

    @hookspec
    async def execute_async(self, target: Optional[Any] = None, parameters: Optional[dict] = None) -> AsyncExploitResult:
        """
        Execute the exploit asynchronously on the specified target using the initialized device plugin.
        
        :param target: The target of the exploit (e.g., an address or identifier)
        :param parameters: Dictionary of parameters for the exploit
        :return: An AsyncExploitResult object containing the result of the exploit
        """

    @hookspec
    def cleanup(self):
        """
        Perform any necessary cleanup after the exploit execution.
        """